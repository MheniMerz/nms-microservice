openapi: 3.0.0
info:
  version: 1.0.0
  title: Multiverse controller API for L2 topology
  description: The API provided by the controller for Agent L2 topology discovery.
servers:
  - url: 'https://mnms.controller:8787/api'
security:
  - bearerAuth: []
tags:
- name: "Login"
  description: "login and logout users."
  externalDocs:
    description: "More info."
    url: "https://github.com/amar-ox/nms-microservice"
- name: "Subnet"
  description: "get and configure topology subnets."
  externalDocs:
    description: "More info."
    url: "https://github.com/amar-ox/nms-microservice"
- name: "Node"
  description: "get and update the list of L2 nodes of the topology."
  externalDocs:
    description: "More info."
    url: "https://github.com/amar-ox/nms-microservice"
- name: "Link Termination Point (LTP)"
  description: "get and update inforamtion about the LTPs of each node."
  externalDocs:
    description: "More info."
    url: "https://github.com/amar-ox/nms-microservice"
- name: "Link"
  description: "get and update physical links."
  externalDocs:
    description: "More info."
    url: "https://github.com/amar-ox/nms-microservice"
paths:
  /login/agent:
    post:
      tags:
        - Login
      description: Authenticate to the controller as an Agent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Agent authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenContent'
        '400':
          description: Incorrect authentication object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authentication information is invalid.
  /topology/subnet:
    post:
      tags:
        - Subnet
      description: Create a new Subnet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subnet'
      responses:
        '201':
          description: Subnet created.
          headers:
            Location:
              description: Relative path to the created Subnet.
              schema:
                type: string
        '400':
          description: Incorrect Subnet object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Subnet
      description: Returns all existing Subnets.
      responses:
        '200':
          description: Subnets retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetArray'
        '401':
          description: Authorization information is missing or invalid.
  /topology/subnet/{subnetId}:
    get:
      tags:
        - Subnet
      description: Retrieve one Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subnet retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetConcise'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Subnet not found.
    delete:
      tags:
        - Subnet
      description: Delete one Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Subnet deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Subnet
      description: Modify existing Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subnet'
      responses:
        '201':
          description: Subnet updated.
        '400':
          description: Incorrect Subnet object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Subnet not found.
  /topology/node:
    post:
      tags:
        - Node
      description: Create a new Node.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: Node created.
          headers:
            Location:
              description: Relative path to the created Node.
              schema:
                type: string
        '400':
          description: Incorrect Node object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Node
      description: Returns all existing Nodes.
      responses:
        '200':
          description: Nodes retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeArray'
        '401':
          description: Authorization information is missing or invalid.
  /topology/node/{nodeId}:
    get:
      tags:
        - Node
      description: Retrieve one Node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Node retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Node not found.
    delete:
      tags:
        - Node
      description: Delete one Node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Node deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Node
      description: Modify existing node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: Node updated.
        '400':
          description: Incorrect Node object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Node not found.
  /topology/ltp:
    post:
      tags:
        - Link Termination Point (LTP)
      description: Create a new Link Termination Point (LTP).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ltp'
      responses:
        '201':
          description: LTP created.
          headers:
            Location:
              description: Relative path to the created LTP.
              schema:
                type: string
        '400':
          description: Incorrect LTP object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Link Termination Point (LTP)
      description: Returns all existing LTPs.
      responses:
        '200':
          description: LTPs retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LtpArray'
        '401':
          description: Authorization information is missing or invalid.
  /topology/ltp/{ltpId}:
    get:
      tags:
        - Link Termination Point (LTP)
      description: Retrieve one LTP.
      parameters:
        - name: ltpId
          description: LTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: LTP retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LtpFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: LTP not found.
    delete:
      tags:
        - Link Termination Point (LTP)
      description: Delete one LTP.
      parameters:
        - name: ltpId
          description: LTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: LTP deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Link Termination Point (LTP)
      description: Modify existing LTP.
      parameters:
        - name: ltpId
          description: LTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ltp'
      responses:
        '201':
          description: LTP updated.
        '400':
          description: Incorrect LTP object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: LTP not found.
  /topology/link:
    post:
      tags:
        - Link
      description: Create a new Link (physical).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
      responses:
        '201':
          description: Link created.
          headers:
            Location:
              description: Relative path to the created Link.
              schema:
                type: string
        '400':
          description: Incorrect Link object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Link
      description: Returns all existing Links.
      responses:
        '200':
          description: Links retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkArray'
        '401':
          description: Authorization information is missing or invalid.
  /topology/link/{linkId}:
    get:
      tags:
        - Link
      description: Retrieve one Link.
      parameters:
        - name: linkId
          description: Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Link retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Link not found.
    delete:
      tags:
        - Link
      description: Delete one Link.
      parameters:
        - name: linkId
          description: Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Link deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Link
      description: Modify existing Link.
      parameters:
        - name: linkId
          description: Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
      responses:
        '201':
          description: Link updated.
        '400':
          description: Incorrect Link object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Link not found.
  /topology/ctp:
    post:
      tags:
        - Connection Termination Point (CTP)
      description: Create a new Connection Termination Point (CTP).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ctp'
      responses:
        '201':
          description: CTP created.
          headers:
            Location:
              description: Relative path to the created CTP.
              schema:
                type: string
        '400':
          description: Incorrect CTP object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Connection Termination Point (CTP)
      description: Returns all existing CTPs.
      responses:
        '200':
          description: CTPs retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtpArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/ctp/{ctpId}':
    get:
      tags:
        - Connection Termination Point (CTP)
      description: Retrieve one CTP.
      parameters:
        - name: ctpId
          description: CTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: CTP retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtpFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: CTP not found.
    delete:
      tags:
        - Connection Termination Point (CTP)
      description: Delete one CTP.
      parameters:
        - name: ctpId
          description: CTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: CTP deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Connection Termination Point (CTP)
      description: Modify existing CTP.
      parameters:
        - name: ctpId
          description: CTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ctp'
      responses:
        '201':
          description: CTP updated.
        '400':
          description: Incorrect CTP object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: CTP not found.
  /topology/lc:
    post:
      tags:
        - Link Connection (LC)
      description: Create a new Link Connection (logical).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lc'
      responses:
        '201':
          description: LC created.
          headers:
            Location:
              description: Relative path to the created LC.
              schema:
                type: string
        '400':
          description: Incorrect LC object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - Link Connection (LC)
      description: Returns all existing LCs.
      responses:
        '200':
          description: LCs retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LcArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/lc/{lcId}':
    get:
      tags:
        - Link Connection (LC)
      description: Retrieve one LC.
      parameters:
        - name: lcId
          description: LC assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: LC retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LcFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: LC not found.
    delete:
      tags:
        - Link Connection (LC)
      description: Delete one LC.
      parameters:
        - name: lcId
          description: LC assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: LC deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - Link Connection (LC)
      description: Modify existing LC.
      parameters:
        - name: lcId
          description: LC assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lc'
      responses:
        '201':
          description: LC updated.
        '400':
          description: Incorrect LC object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: LC not found.
  /topology/face:
    get:
      tags:
        - Face
      description: Returns all existing Faces.
      responses:
        '200':
          description: Faces retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/face/{faceId}':
    get:
      tags:
        - Face
      description: Retrieve one Face.
      parameters:
        - name: faceId
          description: Face assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Face retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Face'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: Face not found.
    delete:
      tags:
        - Face
      description: Delete one Face.
      parameters:
        - name: faceId
          description: face assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Face deleted.
        '401':
          description: Authorization information is missing or invalid.
  /topology/ndnlink:
    post:
      tags:
        - NDN Link
      description: Create a new NDN Link (Face auto-generated).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NdnLink'
      responses:
        '201':
          description: NDN Link created.
          headers:
            Location:
              description: Relative path to the created NDN Link.
              schema:
                type: string
        '400':
          description: Incorrect NDN Link object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
    get:
      tags:
        - NDN Link
      description: Returns all existing NDN Links.
      responses:
        '200':
          description: NDN Links retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NdnLinkArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/ndnlink/{ndnlId}':
    get:
      tags:
        - NDN Link
      description: Retrieve one NDN Link.
      parameters:
        - name: ndnlId
          description: NDN Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: NDN Link retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NdnLinkFull'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: NDN Link not found.
    delete:
      tags:
        - NDN Link
      description: Delete one NDN Link.
      parameters:
        - name: ndnlId
          description: NDN Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: NDN Link deleted.
        '401':
          description: Authorization information is missing or invalid.
    put:
      tags:
        - NDN Link
      description: Modify existing NDN Link.
      parameters:
        - name: ndnlId
          description: NDN Link assigned ID.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NdnLink'
      responses:
        '201':
          description: NDN Link updated.
        '400':
          description: Incorrect NDN Link object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestContent'
        '401':
          description: Authorization information is missing or invalid.
        '404':
          description: NDN Link not found.
  '/topology/subnet/{subnetId}/nodes':
    get:
      tags:
        - Node
      description: Retrieve all the Nodes of a Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned Nodes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeArray'
        '401':
          description: Authorization information is missing or invalid.
  /topology/subnet/{subnetId}/links:
    get:
      tags:
        - Link
      description: Retrieve all the Links of a Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned Links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/subnet/{subnetId}/lcs':
    get:
      tags:
        - Link Connection (LC)
      description: Retrieve all the LCs of a Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned LCs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LcArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/subnet/{subnetId}/ndnlinks':
    get:
      tags:
        - NDN Link
      description: Retrieve all NDN Links of a Subnet.
      parameters:
        - name: subnetId
          description: Subnet assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned NDN Links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NdnLinkArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/node/{nodeId}/ltps':
    get:
      tags:
        - Link Termination Point (LTP)
      description: Retrieve all the LTPs of a Node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned LTPs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LtpArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/node/{nodeId}/ctps':
    get:
      tags:
        - Connection Termination Point (CTP)
      description: Retrieve all the CTPs of a Node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned CTPs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtpArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/node/{ltpId}/ctps':
    get:
      tags:
        - Connection Termination Point (CTP)
      description: Retrieve all the CTPs of an LTP.
      parameters:
        - name: ltpId
          description: LTP assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned CTPs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CtpArray'
        '401':
          description: Authorization information is missing or invalid.
  '/topology/node/{nodeId}/faces':
    get:
      tags:
        - Face
      description: Retrieve all the Faces of a Node.
      parameters:
        - name: nodeId
          description: Node assigned ID.
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned Faces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceArray'
        '401':
          description: Authorization information is missing or invalid.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    TokenContent:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    BadRequestContent:
      type: object
      properties:
        message:
          type: string
    CommonFields:
      type: object
      required:
        - name
        - label
        - description
        - info
      properties:
        name:
          type: string
          description: 'A unique formatted name: "sX" for Subnet, "sX:nY" for Node,
            "sX:nY:lZ" for LTP, "sX:nY:lZ=sP:nQ:lR" for Link, where X,Y,Z,P,Q,R
            are integers.'
        label:
          type: string
          description: 'Client-defined string (e.g., switch1).'
        description:
          type: string
          description: 'Client-defined short text (e.g., switch of floor 1).'
        info:
          type: object
          description: JSON object that includes any additional info.
    Subnet:
      description: Minimal Subnet object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
    SubnetConcise:
      description: Subnet object without contained Nodes and Links.
      allOf:
        - $ref: '#/components/schemas/Subnet'
        - type: object
          required:
            - id
            - created
            - updated
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
    SubnetArray:
      description: List of Subnets.
      type: array
      items:
        $ref: '#/components/schemas/SubnetConcise'
    Node:
      description: Minimal Node object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - vsubnetId
            - hwaddr
            - status
            - type
            - posx
            - posy
            - location
      properties:
        vsubnetId:
          type: integer
          description: ID of the Subnet containing the Node.
        hwaddr:
          type: string
          description: Permanent hardware address assigned by the manufacturer.
        status:
          type: string
          enum:
            - UP
            - DOWN
            - DISCONN
        type:
          type: string
          description: 'Type of the Node (switch, router, forwarder, etc.).'
        posx:
          type: integer
          description: X position on the map.
        posy:
          type: integer
          description: Y position on the map.
        location:
          type: string
          description: Physical location label.
    NodeConcise:
      description: Node object without contained LTPs.
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          required:
            - id
            - created
            - updated
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
    NodeFull:
      description: Node object with contained LTPs.
      allOf:
        - $ref: '#/components/schemas/NodeConcise'
        - type: object
          required:
            - vltps
          properties:
            vltps:
              type: array
              description: List of LTPs.
              items:
                $ref: '#/components/schemas/LtpConcise'
    NodeArray:
      type: array
      description: List of Nodes without contained LTPs.
      items:
        $ref: '#/components/schemas/NodeConcise'
    Ltp:
      description: Minimal LTP object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - vnodeId
            - busy
            - port
          properties:
            vnodeId:
              type: integer
              description: ID of the Node containing the LTP.
            busy:
              type: boolean
              description: Whether the LTP has a physical link or not.
            port:
              type: string
              description: MAC address of the LTP.
    LtpConcise:
      description: LTP object without contained CTPs.
      allOf:
        - $ref: '#/components/schemas/Ltp'
        - type: object
          required:
            - id
            - created
            - updated
            - status
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
            status:
              type: string
              enum:
                - UP
                - DOWN
                - DISCONN
    LtpFull:
      description: LTP object with contained CTPs.
      allOf:
        - $ref: '#/components/schemas/LtpConcise'
        - type: object
          required:
            - vctps
          properties:
            vctps:
              $ref: '#/components/schemas/CtpArray'
    LtpArray:
      type: array
      description: List of LTPs without contained CTPs.
      items:
        $ref: '#/components/schemas/LtpConcise'
    Ctp:
      description: Connection Termination Point (CTP) object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - vlinkId
            - vltpId
          properties:
            vlinkId:
              type: integer
              description: ID of the Link that carries the connection.
            vltpId:
              type: integer
              description: ID of the LTP on which the connection is created.
    CtpFull:
      description: CTP object.
      allOf:
        - $ref: '#/components/schemas/Ctp'
        - type: object
          required:
            - id
            - created
            - updated
      properties:
        id:
          type: integer
          description: A unique ID obtained from the database.
        created:
          type: string
          format: date-time
          description: Creation datetime.
        updated:
          type: string
          format: date-time
          description: Last modification datetime.
    CtpArray:
      type: array
      description: List of CTPs.
      items:
        $ref: '#/components/schemas/CtpFull'
    Link:
      description: Minimal Link object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - srcVltpId
            - destVltpId
          properties:
            srcVltpId:
              type: integer
              description: ID of the source LTP.
            destVltpId:
              type: integer
              description: ID of the destination LTP.
    LinkConcise:
      description: Link object without contained logical links.
      allOf:
        - $ref: '#/components/schemas/Link'
        - type: object
          required:
            - id
            - created
            - updated
            - status
            - srcVnodeId
            - destVnodeId
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
            status:
              type: string
              enum:
                - UP
                - DOWN
                - DISCONN
            srcVnodeId:
              type: integer
              description: ID of the source Node.
            destVnodeId:
              type: integer
              description: ID of the destination Node.
    LinkFull:
      description: Link object with contained logical links.
      allOf:
        - $ref: '#/components/schemas/LinkConcise'
        - type: object
          required:
            - vlinkConns
          properties:
            vlinkConns:
              $ref: '#/components/schemas/LcArray'
    LinkArray:
      type: array
      description: List of Links without contained logical links.
      items:
        $ref: '#/components/schemas/LinkConcise'
    Lc:
      description: Link Connection (LC) object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - vlinkId
            - srcVctpId
            - destVctpId
            - status
          properties:
            status:
              type: string
              enum:
                - UP
                - DOWN
                - DISCONN
            vlinkId:
              type: integer
              description: Link ID that carries the LC.
            srcVctpId:
              type: integer
              description: ID of the source CTP.
            destVctpId:
              type: integer
              description: ID of the destination CTP.
    LcFull:
      description: LC object.
      allOf:
        - $ref: '#/components/schemas/Lc'
        - type: object
          required:
            - id
            - srcVltpId
            - destVltpId
            - srcVnodeId
            - destVnodeId
            - created
            - updated
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            srcVltpId:
              type: integer
              description: ID of the source LTP.
            destVltpId:
              type: integer
              description: ID of the destination LTP.
            srcVnodeId:
              type: integer
              description: ID of the source Node.
            destVnodeId:
              type: integer
              description: ID of the destination Node.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
    LcArray:
      type: array
      description: List of LCs.
      items:
        $ref: '#/components/schemas/LcFull'
    Face:
      description: Face object with all fields.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - id
            - vctpId
            - local
            - remote
            - scheme
            - status
            - created
            - updated
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            vctpId:
              type: integer
              description: CTP ID on which the Face is related.
            local:
              type: string
              description: Local address of the locator. Depends on Scheme.
            remote:
              type: string
              description: Remote address of the locator. Depends on Scheme.
            scheme:
              type: string
              description: Scheme used for Face creation.
              enum:
                - ether
            status:
              type: string
              enum:
                - UP
                - DOWN
                - DISCONN
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
    FaceArray:
      type: array
      description: List of Faces.
      items:
        $ref: '#/components/schemas/Face'
    NdnLink:
      description: NdnLink object for creation.
      allOf:
        - $ref: '#/components/schemas/CommonFields'
        - type: object
          required:
            - srcVctpId
            - destVctpId
            - lcs
            - status
          properties:
            srcVctpId:
              type: integer
              description: Source CTP ID of the NDN link.
            destVctpId:
              type: integer
              description: Source CTP ID of the NDN link.
            lcs:
              type: array
              items:
                type: integer
              description: List of LC IDs over which the NDN link is conencted.
            status:
              type: string
              enum:
                - UP
                - DOWN
                - DISCONN
    NdnLinkFull:
      description: NdnLink object with all fields.
      allOf:
        - $ref: '#/components/schemas/NdnLink'
        - type: object
          required:
            - id
            - created
            - updated
            - srcVnodeId
            - destvnodeId
            - srcFaceId
            - destFaceId
          properties:
            id:
              type: integer
              description: A unique ID obtained from the database.
            created:
              type: string
              format: date-time
              description: Creation datetime.
            updated:
              type: string
              format: date-time
              description: Last modification datetime.
            srcVnodeId:
              type: integer
              description: ID of the source Node.
            destVnodeId:
              type: integer
              description: ID of the destination Node.
            srcFaceId:
              type: integer
              description: ID of the source Fave.
            destFaceId:
              type: integer
              description: ID of the destination Face.
    NdnLinkArray:
      type: array
      description: List of NdnLinks.
      items:
        $ref: '#/components/schemas/NdnLinkFull'
